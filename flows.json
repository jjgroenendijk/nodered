[
    {
        "id": "6feec8e04bcef45b",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4fe80b17719e8724",
        "type": "mqtt-broker",
        "name": "muskrattrap@ttn",
        "broker": "eu1.cloud.thethings.network",
        "port": "1883",
        "tls": "f5a2cebc5ac49db9",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "f5a2cebc5ac49db9",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "a862733b31c57557",
        "type": "MySQLdatabase",
        "name": "mariadb",
        "host": "rpi4-jj-iot",
        "port": "3306",
        "db": "muskrattrap_db",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "c863e9b2ec3be8ca",
        "type": "mqtt in",
        "z": "6feec8e04bcef45b",
        "name": "muskrattrap@ttn",
        "topic": "v3/muskrattrap@ttn/devices/#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "4fe80b17719e8724",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 40,
        "wires": [
            [
                "ca3603af8b00063b",
                "6d05ecf67a45f9b9"
            ]
        ]
    },
    {
        "id": "918fa74303ce0827",
        "type": "debug",
        "z": "6feec8e04bcef45b",
        "name": "unified output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 480,
        "y": 260,
        "wires": []
    },
    {
        "id": "ca3603af8b00063b",
        "type": "function",
        "z": "6feec8e04bcef45b",
        "name": "Unifier TTNV3",
        "func": "var unified = {};\nunified.source = \"TTNV3\";\n\n\nif('join_accept' in msg.payload){\n    return;\n}\n\n// unified.dateTime = msg.collectedTime;\nvar tzoffset = (new Date()).getTimezoneOffset() * 60000; //offset in milliseconds\nvar dateTime = (new Date(Date.now() - tzoffset)).toISOString().slice(0, 19).replace('T', ' ');\nunified.dateTime = dateTime;\n\nunified.devID = msg.payload.end_device_ids.device_id;\nunified.appEUI = msg.payload.end_device_ids.join_eui;\nunified.devEUI = msg.payload.end_device_ids.dev_eui;\n\nif(typeof msg.payload.uplink_message.f_cnt !== 'undefined') {\n    unified.fcnt = msg.payload.uplink_message.f_cnt\n}else{\n    unified.fcnt = 0;\n}\n\nunified.port = msg.payload.uplink_message.f_port;\nunified.devAddr = msg.payload.end_device_ids.dev_addr;\nunified.frequency = parseInt(msg.payload.uplink_message.settings.frequency)/1000000;\n\nunified.sf = msg.payload.uplink_message.settings.data_rate.lora.spreading_factor\n// unified.sf = \"\";\n\nunified.payload = {};\nunified.payload.buffer = Buffer.from(msg.payload.uplink_message.frm_payload, 'base64');\nunified.payload.size = Buffer.byteLength(msg.payload.uplink_message.frm_payload);\nunified.payload.base64 = msg.payload.uplink_message.frm_payload;\nunified.payload.decoded = {};\nunified.payload.decoded = msg.payload.uplink_message.decoded_payload;\n\nunified.metaData = {};\nunified.metaData.gatewayCount = msg.payload.uplink_message.rx_metadata.length;\nunified.metaData.gateways = [];\nfor (var i=0 ; i < unified.metaData.gatewayCount ; i++) {\n    var data = {};\n    data.name = msg.payload.uplink_message.rx_metadata[i].gateway_ids.gateway_id;\n    \n    if(typeof msg.payload.uplink_message.rx_metadata[i].gateway_ids.eui !== 'undefined') {\n        data.id = msg.payload.uplink_message.rx_metadata[i].gateway_ids.eui;\n    } else {\n        data.id = 0;\n    }\n    \n    data.rssi = msg.payload.uplink_message.rx_metadata[i].rssi;\n    data.snr = msg.payload.uplink_message.rx_metadata[i].snr;\n    \n    if(typeof msg.payload.uplink_message.rx_metadata[i].location !== 'undefined') {\n        data.lat = msg.payload.uplink_message.rx_metadata[i].location.latitude;\n        data.lon = msg.payload.uplink_message.rx_metadata[i].location.longitude;\n        data.height = msg.payload.uplink_message.rx_metadata[i].location.altitude;\n    } else {\n        data.lat = 0;\n        data.lon = 0;\n        data.height = 0;\n    }\n    \n    unified.metaData.gateways.push(data);\n}\n\nreturn unified;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 40,
        "wires": [
            [
                "918fa74303ce0827",
                "4bef840c7cec618b"
            ]
        ],
        "inputLabels": [
            "Helium"
        ],
        "outputLabels": [
            "Unified"
        ],
        "icon": "font-awesome/fa-arrows-alt"
    },
    {
        "id": "6d05ecf67a45f9b9",
        "type": "debug",
        "z": "6feec8e04bcef45b",
        "name": "raw mqtt",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 220,
        "y": 260,
        "wires": []
    },
    {
        "id": "312e3b32cec70ae1",
        "type": "mysql",
        "z": "6feec8e04bcef45b",
        "mydb": "a862733b31c57557",
        "name": "mariadb",
        "x": 780,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "4bef840c7cec618b",
        "type": "function",
        "z": "6feec8e04bcef45b",
        "name": "database command transformer",
        "func": "// Extract the payload from the MQTT message\nvar payload = msg.payload;\n\n// Construct the SQL INSERT statement\nvar sql = `INSERT INTO muskrattrap (messageSource, dateTime, devID, appEUI, devEUI, fcnt, port, devAddr, frequency, sf, batteryStatus, catchDetect, doorStatus, trapDisplacement, id, unixTime, version)\nVALUES (\n  '${msg.source}', '${msg.dateTime}', '${msg.devID}', \n  '${msg.appEUI}', '${msg.devEUI}', ${msg.fcnt}, ${msg.port}, \n  '${msg.devAddr}', ${msg.frequency}, ${msg.sf}, ${payload.decoded.data.batteryStatus}, \n  ${payload.decoded.data.catchDetect ? 1 : 0}, ${payload.decoded.data.doorStatus ? 1 : 0}, \n  ${payload.decoded.data.trapDisplacement ? 1 : 0}, ${payload.decoded.data.id}, \n  ${payload.decoded.data.unixTime}, ${payload.decoded.data.version}\n);`;\n\n// Set the SQL query in the payload\nmsg.topic = sql;\n\n// Return the message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 40,
        "wires": [
            [
                "312e3b32cec70ae1",
                "73e72d45c5b92872"
            ]
        ]
    },
    {
        "id": "73e72d45c5b92872",
        "type": "debug",
        "z": "6feec8e04bcef45b",
        "name": "database command debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 260,
        "wires": []
    }
]